// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OnboardEnum {
  NEW
  INITIATED
  PHONE_VERIFIED
  SET_EMAIL
  EMAIL_VERIFIED
  SET_PASSCODE
  SET_PIN
  COMPLETED
}

enum AccountProviderEnum {
  BANKONE
}

enum GenderEnum {
  MALE
  FEMALE
  OTHER
}

enum OnboardType {
  NEW
  EXISTING
}

enum LoginEnum {
  INITIATED
  PHONE_VERIFIED
  LOGGED_IN
}

enum KycEnum {
  NEW
  STARTED
  SUBMITTED
  APPROVED
  FAILED
}

enum AddressVerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

model User {
  id                 String               @id @default(uuid())
  email              String?              @unique
  username           String?              @unique
  firstName          String?
  lastName           String?
  otherName          String?
  gender             GenderEnum?
  reference          String?
  password           String?
  passcode           String?
  pin                String?
  dob                String?
  pob                String?
  country            String?
  phoneNumber        String               @unique
  onboardType        OnboardType          @default(NEW)
  onboarding         OnboardEnum          @default(NEW)
  kycStatus          KycEnum              @default(NEW)
  login              LoginEnum            @default(INITIATED)
  loginAttempts      Int                  @default(0)
  lastLogin          DateTime?
  accounts           Account[]
  kyc                Kyc[]
  token              String?
  bvnLookup          String?              @db.Text
  ninLookup          String?              @db.Text
  otp                String?
  otpExpires         DateTime?
  otpId              String?
  isDeleted          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ResidentialAddress ResidentialAddress[]

  @@index([phoneNumber])
  @@index([email])
  @@index([id])
  @@map("users")
  SecurityQuestion SecurityQuestion[]
}

model Account {
  id            String              @id @default(uuid())
  customerId    String?
  trackingRef   String?
  accountNumber String              @unique
  user          User                @relation(fields: [userId], references: [id])
  userId        String              @unique
  provider      AccountProviderEnum @default(BANKONE)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@map("accounts")
}

model ResidentialAddress {
  id                        String                    @id @default(uuid())
  user                      User                      @relation(fields: [userId], references: [id])
  userId                    String                    @unique
  address                   String
  city                      String
  state                     String
  zipcode                   String
  landmark                  String
  lga                       String
  addressVerificationStatus AddressVerificationStatus @default(PENDING)
  addressVerificationId     String?
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt

  @@map("residential_addresses")
}

model Kyc {
  id                       String   @id @default(uuid())
  user                     User     @relation(fields: [userId], references: [id])
  userId                   String   @unique
  nationalityStatus        Boolean  @default(false)
  faceVerifyStatus         Boolean  @default(false)
  ninStatus                Boolean  @default(false)
  bvnStatus                Boolean  @default(false)
  residentialAddressStatus Boolean  @default(false)
  attestation              Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("kycs")
}

model SecurityQuestion {
  id        String   @id @default(uuid())
  number    Int
  question  String
  answer    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("security_questions")
}
