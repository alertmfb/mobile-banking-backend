generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OnboardEnum {
  NEW
  INITIATED
  PHONE_VERIFIED
  SET_EMAIL
  EMAIL_VERIFIED
  SET_PASSCODE
  SET_PIN
  COMPLETED
}

enum AccountProviderEnum {
  BANKONE
}

enum GenderEnum {
  MALE
  FEMALE
  OTHER
}

enum OnboardType {
  NEW
  EXISTING
}

enum LoginEnum {
  INITIATED
  PHONE_VERIFIED
  LOGGED_IN
}

enum KycEnum {
  NEW
  STARTED
  SUBMITTED
  APPROVED
  FAILED
}

enum AddressVerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

enum TransactionType {
  TRANSFER
  AIRTIME
  DATA
  TV_BILL
  ELECTRICITY
  BETTING
  PENSION
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  REVERSED
}

enum ActivityType {
  TRANSFER
  AIRTIME
  DATA
  TV_BILL
  ELECTRICITY
  BETTING
  PENSION
  CREATE_TRANSFER_BENEFICIARY
  CREATE_AIRTIME_BENEFICIARY
  CREATE_DATA_BENEFICIARY
  CREATE_TV_BILL_BENEFICIARY
  CREATE_ELECTRICITY_BENEFICIARY
  BULK_CREATE_BENEFICIARY
  BULK_AIRTIME
  BULK_DATA
}

enum ActivityStatus {
  VIEW
  INITIATE
  AUTHORIZE
  REJECT
}

enum CardType {
  VISA
  MASTERCARD
  VERVE
}

enum PickupBranch {
  YABA
  IKEJA
  VI
  TRADEFAIR
  IKORODU
}

enum CardRequestStatus {
  RECEIVED
  PROCESSING
  PRINTING
  READY
  DELIVERED
  CANCELLED
  SENT
}

enum CardDeliveryOption {
  PICKUP
  DELIVERY
}

enum NetworkProvider {
  MTN
  GLO
  AIRTEL
  NINE_MOBILE
}

enum TvProvider {
  DSTV
  GOTV
  STARTIMES
}

enum MeterType {
  BEDC
  EKEDC
  AEDC
  EEDC
  IBEDC
  IKEDC
  JEDC
  KAEDC
  KEDCO
  PHEDC
  YEDC
}

enum BuildingType {
  DETACHED
  SEMI_DETACHED
  BUNGALOW
  DUPLEX
  APARTMENT
  FLATS
}

enum Relationship {
  FATHER
  MOTHER
  SIBLING
  FRIEND
}

enum PromoType {
  SIGNUP
  REFERRAL
  PROMO
}

enum TransactionAction {
  DEBIT
  CREDIT
}

model User {
  id                     String                   @id @default(uuid())
  email                  String?                  @unique
  username               String?                  @unique
  firstName              String?
  lastName               String?
  otherName              String?
  gender                 GenderEnum?
  reference              String?
  password               String?
  passcode               String?
  pin                    String?
  dob                    String?
  pob                    String?
  country                String?
  phoneNumber            String?                  @unique
  onboardType            OnboardType              @default(NEW)
  onboarding             OnboardEnum              @default(NEW)
  kycStatus              KycEnum                  @default(NEW)
  login                  LoginEnum                @default(INITIATED)
  loginAttempts          Int                      @default(0)
  lastLogin              DateTime?
  accounts               Account[]
  kyc                    Kyc[]
  token                  String?
  bvnLookup              String?                  @db.Text
  ninLookup              String?                  @db.Text
  otp                    String?
  otpExpires             DateTime?
  otpId                  String?
  phoneToken             String?                  @db.Text
  emailToken             String?                  @db.Text
  isEmailSet             Boolean                  @default(false)
  isPhoneSet             Boolean                  @default(false)
  isPinSet               Boolean                  @default(false)
  isDeleted              Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  ResidentialAddress     ResidentialAddress[]
  SecurityQuestion       SecurityQuestion[]
  KycUserDetails         KycUserDetails[]
  Transaction            Transaction[]
  TransactionLimit       TransactionLimit[]
  Beneficiary            Beneficiary[]
  CardRequest            CardRequest[]
  NextOfKin              NextOfKin[]
  NotificationPreference NotificationPreference[]
  Device                 Device[]
  BillPayments           BillPayments[]
  PromoApply             PromoApply[]

  @@index([phoneNumber])
  @@index([email])
  @@index([id])
  @@map("users")
}

model Account {
  id            String              @id @default(uuid())
  customerId    String?
  trackingRef   String?
  accountNumber String              @unique
  user          User                @relation(fields: [userId], references: [id])
  userId        String              @unique
  provider      AccountProviderEnum @default(BANKONE)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  Transaction   Transaction[]
  Beneficiary   Beneficiary[]
  CardRequest   CardRequest[]

  @@map("accounts")
}

model ResidentialAddress {
  id                        String                    @id @default(uuid())
  user                      User                      @relation(fields: [userId], references: [id])
  userId                    String                    @unique
  address                   String?
  city                      String?
  state                     String?
  zipcode                   String?
  landmark                  String?
  lga                       String?
  buildingColour            String?
  gateColor                 String?
  buildingType              BuildingType?
  occupancyLength           String?
  identifierName            String?
  identifierRelationship    String?
  otherName                 String?
  streetPhoto               String?                   @db.Text
  buildingPhoto             String?                   @db.Text
  addressVerificationStatus AddressVerificationStatus @default(PENDING)
  addressVerificationId     String?
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt

  @@map("residential_addresses")
}

model Kyc {
  id                          String   @id @default(uuid())
  user                        User     @relation(fields: [userId], references: [id])
  userId                      String   @unique
  nationalityStatus           Boolean  @default(false)
  faceVerifyStatus            Boolean  @default(false)
  ninStatus                   Boolean  @default(false)
  bvnStatus                   Boolean  @default(false)
  nextOfKinStatus             Boolean  @default(false)
  residentialAddressSubmitted Boolean  @default(false)
  residentialAddressStatus    Boolean  @default(false)
  attestation                 Boolean  @default(false)
  accountIssued               Boolean  @default(false)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@map("kycs")
}

// this model stores user basic info gotten from bvn
model KycUserDetails {
  id                 String   @id @default(uuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @unique
  email              String?
  phoneOne           String?
  phoneTwo           String?
  title              String?
  maritalStatus      String?
  residentialAddress String?
  residentialLga     String?
  residentialState   String?
  originLga          String?
  originState        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("kyc_user_details")
}

model SecurityQuestion {
  id        String   @id @default(uuid())
  number    Int
  question  String
  answer    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("security_questions")
}

model CardRequest {
  id             String             @id @default(uuid())
  user           User               @relation(fields: [userId], references: [id])
  userId         String
  account        Account            @relation(fields: [accountId], references: [id])
  accountId      String
  deliveryOption CardDeliveryOption @default(PICKUP)
  cardType       CardType           @default(VERVE)
  pickupBranch   PickupBranch       @default(YABA)
  address        String?
  city           String?
  zipCode        String?
  status         CardRequestStatus  @default(RECEIVED)
  paid           Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([userId])
  @@map("card_requests")
}

model Transaction {
  id              String            @id @default(uuid())
  account         Account           @relation(fields: [accountId], references: [id])
  accountId       String
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  beneficiary     Beneficiary?      @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId   String?
  transactionType TransactionType   @default(TRANSFER)
  action          TransactionAction @default(DEBIT)
  amount          Decimal           @db.Decimal(10, 2)
  newBalance      Decimal           @db.Decimal(10, 2)
  reference       String?
  narration       String?
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  metadata        Json?
  BillPayments    BillPayments[]
  PromoApply      PromoApply[]

  @@index([accountId])
  @@index([transactionType])
  @@index([userId])
  @@index([id])
  @@index([reference])
  @@map("transactions")
}

model TransactionLimit {
  id              String          @id @default(uuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  transactionType TransactionType @default(TRANSFER)
  singleLimit     Decimal?        @db.Decimal(10, 2)
  dailyLimit      Decimal?        @db.Decimal(10, 2)
  monthlyLimit    Decimal?        @db.Decimal(10, 2)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId])
  @@index([transactionType])
  @@map("transaction_limits")
}

model Beneficiary {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  account         Account?         @relation(fields: [accountId], references: [id])
  accountId       String?
  beneficiaryType TransactionType  @default(TRANSFER)
  accountName     String?
  bankName        String?
  bankCode        String?
  accountNumber   String?
  tvCardNumber    String?
  tvCardName      String?
  tvProvider      TvProvider?
  phoneNumber     String?
  networkProvider NetworkProvider?
  meterNumber     String?
  meterName       String?
  meterType       MeterType?
  meterTypeFull   String?
  isBeneficiary   Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Transaction     Transaction[]

  @@index([userId])
  @@map("beneficiary")
}

model NextOfKin {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @unique
  firstName    String
  lastName     String
  phoneNumber  String
  email        String
  address      String
  city         String?
  country      String?
  relationship Relationship
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("next_of_kins")
}

model NotificationPreference {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  creditEmail    Boolean  @default(false)
  creditSms      Boolean  @default(false)
  creditPush     Boolean  @default(false)
  creditWhatsapp Boolean  @default(false)
  debitEmail     Boolean  @default(false)
  debitSms       Boolean  @default(false)
  debitPush      Boolean  @default(false)
  debitWhatsapp  Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("notification_preferences")
}

model Device {
  id        String   @id @default(uuid())
  deviceId  String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ip        String?
  browser   String?
  os        String?
  device    String?
  location  String?
  longitude String?
  latitude  String?
  lastUsed  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("devices")
}

model BillPayments {
  id            String            @id @default(uuid())
  user          User              @relation(fields: [userId], references: [id])
  userId        String
  transaction   Transaction       @relation(fields: [transactionId], references: [id])
  transactionId String
  biller        String?
  productId     String?
  productType   String?
  amount        Decimal           @db.Decimal(10, 2)
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("bill_payments")
}

model PromoApply {
  id            String       @id @default(uuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  code          String
  awarded       Boolean      @default(false)
  amount        Decimal?     @db.Decimal(10, 2)
  awardedDate   DateTime?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("promo_applies")
}
